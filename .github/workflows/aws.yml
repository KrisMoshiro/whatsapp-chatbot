name: CI/CD to Elastic Beanstalk - TEST PYTHON

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create deploy ZIP
        run: |
          zip -r deploy.zip . -x "*.git*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-zip
          path: deploy.zip

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy-zip
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Upload & deploy via AWS CLI (idempotente)
        env:
          APP_NAME: ${{ secrets.EB_APP_NAME }}
          ENV_NAME: ${{ secrets.EB_ENV_NAME }}
          REGION: us-east-2
          BUCKET: elasticbeanstalk-us-east-2-461942015119
          # Label Ãºnico (id + intento + sha corto)
          VERSION: v-${{ github.run_id }}-${{ github.run_attempt }}-${{ github.sha }}
          FILE: deploy.zip
        run: |
          set -euo pipefail

          echo "Caller identity:" && aws sts get-caller-identity
          aws s3api get-bucket-location --bucket "$BUCKET" >/dev/null

          KEY="${VERSION}.zip"
          echo "Uploading $FILE to s3://$BUCKET/$KEY"
          aws s3 cp "$FILE" "s3://$BUCKET/$KEY"

          echo "Ensuring EB Application Version: $VERSION"
          if aws elasticbeanstalk describe-application-versions \
               --application-name "$APP_NAME" \
               --version-labels "$VERSION" \
               --region "$REGION" \
               --query 'ApplicationVersions | length(@)' | grep -q '^1$'; then
            echo "Version already exists, skipping create."
          else
            aws elasticbeanstalk create-application-version \
              --application-name "$APP_NAME" \
              --version-label "$VERSION" \
              --source-bundle S3Bucket="$BUCKET",S3Key="$KEY" \
              --region "$REGION"
          fi

          echo "Updating environment: $ENV_NAME -> $VERSION"
          aws elasticbeanstalk update-environment \
            --environment-name "$ENV_NAME" \
            --version-label "$VERSION" \
            --region "$REGION"

          echo "Done."